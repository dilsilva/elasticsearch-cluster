


 -- The ES roles assigned to each of the ES nodes must be identical for all nodes in the ES cluster. Roles master/data and tune accordly
what needs to be defined:
!storageclass: 
!nodeselector: to guarantee that data pods will run where the volumes are available
1: pod tem de estar rodando no mesmo lugar que o disco

 -- authentication, authorization, encryption
 ?auth: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-users-and-roles.html
 ?transport: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-transport-settings.html
 ! http: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-accessing-elastic-services.html
 ?ingress: tls: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls (annotations)
 ! security-context: check about other 

 -- maintain continuous service availability.
 -- operational tasks such as system upgrades, cluster scaling, disaster recovery procedures, etc. Explain your approach 
  A: gitlab helmfile, separate by profile and think about the strategies as improvement points multi region, backup
  B: test all aspects of the deployment for the automation choosed.
  

 -- strategy for system observability, specifying which metrics are critical for monitoring and analyzing the system's health
!? monitoring: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-stack-monitoring.html

 -- Future Improvements.
 imagePullSecrets: internalize images (Crescer em cima)
  - Rebuildar com testes de segurança (CVE)
 Manage secrets using external solutions (Cloud Manage or Hashicorp Vault)
 Automaçoes pra disaster recovery usando CI
 Manage cluster policies (Admission Controller, Network Policy)
 Optimise instance types
 Make roles and permissions granular as possible (implement Least Privilege)
 
 CI tests relativos ao codigo 
 CI tests do helm chart
 Otimizaçoes de parametros de performance (procurar na internet possibilidades)
 Strategy to keep data plan and master plan in the same node, increase availability in case of faililure
 internalizar 

Roadmap:
Executar helm redondo com todos os requisitos listados
 - Evitar forks, referenciar o helm file original https://github.com/elastic/cloud-on-k8s/tree/2.13/deploy
 - 1 cluster para produção
 - camada extra do helmfile para dev capando funcionalidades
 - Readme focando em instalação, cleanup, estrategias de system upgrades, cluster scaling, disaster recovery (Chatgpt) https://github.com/apache/apisix-helm-chart/blob/master/charts/apisix/README.md Separar cada um dos componentes por sessão
 - Boas praticas de repo (.gitignore)
 - Template de github actions runner para executar o helmtemplate

Pensar um helmfile por ambiente como estrategia pra rodar a automação
 - 
 - 


 Evitar forks, referenciar o helm file original 
 



*Comentar que durante o lab o registry docker da elasticsearch caiu
  


Diretorio ficará:
envs:
  prod:
  dev:
README.md
helmfile.yaml
values
.gitignore

`helmfile -f helmfile.yaml --environment envs/prod`
helmfile --interactive --environment default sync